# from PyQt5.QtWidgets import QDialog, QPushButton, QTextBrowser, QCheckBox, QLabel
# from PyQt5 import uic
# from PyQt5.QtCore import Qt
# import os
# from logic.data_entry import DataEntryForm

# class RentDialog(QDialog):
#     def __init__(self, parent=None, data_service=None):
#         super().__init__(parent)
#         uic.loadUi(os.path.join(os.path.dirname(__file__), "rent_dialog.ui"), self)

#         self.data_service = data_service or DataEntryForm()
#         self.df_rent_2025 = self.data_service.load_rent_2025()

#         # –ü—Ä–∏–≤—è–∑–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
#         self.pushButton_rent_ok = self.findChild(QPushButton, "pushButton_rent_ok")
#         self.textBrowser_gov_rent = self.findChild(QTextBrowser, "textBrowser_gov_rent")
#         self.textBrowser_market_rent = self.findChild(QTextBrowser, "textBrowser_market_rent")
#         self.checkBox_gov_rent = self.findChild(QCheckBox, "checkBox_gov_rent")
#         self.checkBox_market_rent = self.findChild(QCheckBox, "checkBox_market_rent")
#         self.label_gov_rent = self.findChild(QLabel, "label_gov_rent")

#         self.checkboxes = [self.checkBox_gov_rent, self.checkBox_market_rent]
#         BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
#         self.project_dir = BASE_DIR
#         self.pushButton_rent_ok.clicked.connect(self.accept)
#         for cb in self.checkboxes:
#             cb.stateChanged.connect(self.single_selection)

#         explanation_text = (
#             "–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã –Ω–∞ 2025 –≥–æ–¥,\n"
#             "—Ä–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å —É—á–µ—Ç–æ–º –ø–æ–≤—ã—à–∞—é—â–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º—ã—Ö –º–µ—Å—Ç–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∞–º–∏ –≤–ª–∞—Å—Ç–∏.\n"
#             "–≠—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–∞—Ä—å–∏—Ä—É—é—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–∞–π–æ–Ω–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤.\n"
#             "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–≥–∏–æ–Ω –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–≤–∫—É."
#         )
#         self.textBrowser_gov_rent.setText(explanation_text)


#         # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
#         image_path = os.path.join(self.project_dir, "icon", "rent_region.png")
#         if os.path.exists(image_path):
#             html_image = f'<img src="{image_path}" width="500">'
#             self.textBrowser_market_rent.setHtml(html_image)
#         else:
#             self.textBrowser_market_rent.setText("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

#     def set_text_and_checkbox(self, region_name: str):
#         """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
#         if self.df_rent_2025.empty:
#             self.label_gov_rent.setText("–î–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞–≤–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
#             self.checkBox_gov_rent.setText("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
#             return

#         df = self.df_rent_2025.copy()
#         df["Region"] = df["Region"].str.strip()

#         row = df[df["Region"] == region_name.strip()]
#         if not row.empty:
#             rent_value = row["rent_2025"].values[0]
#             self.checkBox_gov_rent.setText(f"{rent_value:,.2f} —Å—É–º/–º.–∫–≤.")
#             self.checkBox_gov_rent.setProperty("raw_value", rent_value)  # üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ
#             self.label_gov_rent.setText(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞—Ä–µ–Ω–¥–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω—É: {region_name}")
#         else:
#             self.checkBox_gov_rent.setText("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
#             self.label_gov_rent.setText(f"–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: {region_name}")

#     def get_selected_rent_type(self):
#         if self.checkBox_gov_rent.isChecked():
#             return self.checkBox_gov_rent.property("raw_value")  # üëà –ø–æ–ª—É—á–∞–µ–º float
#         elif self.checkBox_market_rent.isChecked():
#             return 25000  # –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
#         return None

#     def single_selection(self):
#         """–†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–µ–∫–±–æ–∫—Å"""
#         sender = self.sender()
#         for cb in self.checkboxes:
#             if cb != sender:
#                 cb.setChecked(False)


    